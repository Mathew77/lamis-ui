{"ast":null,"code":"import _objectSpread from \"/Users/matosky/react-reduction1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/matosky/react-reduction1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/matosky/react-reduction1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/matosky/react-reduction1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/matosky/react-reduction1/src/components/Hiv/Medication/Medication.jsx\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { CardBody, Col, Row, Form, Card } from 'reactstrap';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport SaveIcon from '@material-ui/icons/Save';\nimport { url } from 'axios/url';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root2: {\n      flexGrow: 1,\n      width: '100%',\n      backgroundColor: theme.palette.background.paper,\n      margin: theme.spacing(7),\n      bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)'\n      },\n      title: {\n        fontSize: 12\n      },\n      pos: {\n        fontSize: 11\n      },\n      cardContent: {\n        padding: 2\n      },\n      cardroot: {\n        margin: theme.spacing(1),\n        height: 250 + 'px !important'\n      }\n    },\n    alertmsge: {\n      marginTop: theme.spacing(2)\n    },\n    rootaccordia: {\n      width: '100%'\n    },\n    accordiaheading: {\n      fontSize: theme.typography.pxToRem(15),\n      fontWeight: theme.typography.fontWeightRegular\n    },\n    allergiesroot: {\n      display: 'flex',\n      justifyContent: 'center',\n      flexWrap: 'wrap',\n      '& > *': {\n        margin: theme.spacing(0.5)\n      }\n    },\n    checkboxroot: {\n      display: 'flex'\n    },\n    formControl: {\n      margin: theme.spacing(3)\n    },\n    root: {\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        width: 200\n      }\n    },\n    formroot: {\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        width: 200\n      }\n    },\n    heading: {\n      fontSize: theme.typography.pxToRem(15)\n    },\n    secondaryHeading: {\n      fontSize: theme.typography.pxToRem(15),\n      color: theme.palette.text.secondary\n    },\n    icon: {\n      verticalAlign: 'bottom',\n      height: 20,\n      width: 20\n    },\n    details: {\n      alignItems: 'center'\n    },\n    column: {\n      flexBasis: '33.33%'\n    },\n    helper: {\n      borderLeft: \"2px solid \".concat(theme.palette.divider),\n      padding: theme.spacing(1, 2)\n    },\n    link: {\n      color: theme.palette.primary.main,\n      textDecoration: 'none',\n      '&:hover': {\n        textDecoration: 'underline'\n      }\n    },\n    inforoot: {\n      width: '95%',\n      margin: 20,\n      backgroundColor: '#eee'\n    }\n  };\n});\nvar cardStyle = {\n  borbderColor: '#fff',\n  marginBottom: 10\n};\nexport default function Grouped() {\n  var apicountries = url + \"countries\";\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      countries = _React$useState2[0],\n      setCountries = _React$useState2[1]; //Get countries     \n\n\n  React.useEffect(function () {\n    function getCharacters() {\n      return _getCharacters.apply(this, arguments);\n    }\n\n    function _getCharacters() {\n      _getCharacters = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var response, body;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(apicountries);\n\n              case 2:\n                response = _context.sent;\n                _context.next = 5;\n                return response.json();\n\n              case 5:\n                body = _context.sent;\n                setCountries(body);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _getCharacters.apply(this, arguments);\n    }\n\n    getCharacters();\n  }, []);\n  console.log(countries);\n  var classes = useStyles();\n  var options = countries.map(function (option) {\n    var firstLetter = option.title[0].toUpperCase();\n    return _objectSpread({\n      firstLetter: /[0-9]/.test(firstLetter) ? '0-9' : firstLetter\n    }, option);\n  });\n  return React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(Col, {\n    lg: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(Card, {\n    style: cardStyle,\n    className: \" p-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.title,\n    color: \"primary\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, \"Drug Order\"), React.createElement(\"form\", {\n    className: classes.formroot,\n    noValidate: true,\n    autoComplete: \"off\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, React.createElement(Autocomplete, {\n    id: \"grouped-demo\",\n    options: options.sort(function (a, b) {\n      return -b.firstLetter.localeCompare(a.firstLetter);\n    }),\n    groupBy: function groupBy(option) {\n      return option.firstLetter;\n    },\n    getOptionLabel: function getOptionLabel(option) {\n      return option.title;\n    },\n    style: {\n      width: 300\n    },\n    renderInput: function renderInput(params) {\n      return React.createElement(TextField, Object.assign({}, params, {\n        label: \"With categories\",\n        variant: \"outlined\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    disabled: true,\n    id: \"outlined-required\",\n    label: \"Drug Unit\",\n    defaultValue: \"Drug Unit\",\n    variant: \"outlined\",\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    id: \"outlined-password-input\",\n    label: \"Frequency\",\n    autoComplete: \"current-password\",\n    variant: \"outlined\",\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    id: \"outlined-read-only-input\",\n    label: \"Start Date\",\n    defaultValue: \"Start Date\",\n    InputProps: {\n      readOnly: true\n    },\n    variant: \"outlined\",\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    id: \"outlined-number\",\n    label: \"Duration\",\n    type: \"number\",\n    InputLabelProps: {\n      shrink: true\n    },\n    variant: \"outlined\",\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    id: \"outlined-search\",\n    label: \"Duration Unit\",\n    type: \"text\",\n    variant: \"outlined\",\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    id: \"outlined-helperText\",\n    label: \"Enter Instruction\",\n    defaultValue: \"Enter Instruction\",\n    variant: \"outlined\",\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.button,\n    startIcon: React.createElement(SaveIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, \"Save\")))))), React.createElement(Col, {\n    lg: 8,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }, React.createElement(Col, {\n    lg: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }, React.createElement(Card, {\n    style: cardStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }, React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.title,\n    color: \"primary\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, \"Previous Order\")))), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }), React.createElement(Col, {\n    lg: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243\n    },\n    __self: this\n  }, React.createElement(Card, {\n    style: cardStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  }, React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.title,\n    color: \"primary\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }, \"Current Order\"))))))));\n}","map":{"version":3,"sources":["/Users/matosky/react-reduction1/src/components/Hiv/Medication/Medication.jsx"],"names":["React","makeStyles","TextField","Autocomplete","CardBody","Col","Row","Form","Card","Typography","Button","SaveIcon","url","useStyles","theme","root2","flexGrow","width","backgroundColor","palette","background","paper","margin","spacing","bullet","display","transform","title","fontSize","pos","cardContent","padding","cardroot","height","alertmsge","marginTop","rootaccordia","accordiaheading","typography","pxToRem","fontWeight","fontWeightRegular","allergiesroot","justifyContent","flexWrap","checkboxroot","formControl","root","formroot","heading","secondaryHeading","color","text","secondary","icon","verticalAlign","details","alignItems","column","flexBasis","helper","borderLeft","divider","link","primary","main","textDecoration","inforoot","cardStyle","borbderColor","marginBottom","Grouped","apicountries","useState","countries","setCountries","useEffect","getCharacters","fetch","response","json","body","console","log","classes","options","map","option","firstLetter","toUpperCase","test","sort","a","b","localeCompare","params","readOnly","shrink","button"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAmB,OAAnB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,SACIC,QADJ,EAEIC,GAFJ,EAGIC,GAHJ,EAIIC,IAJJ,EAKIC,IALJ,QAOO,YAPP;AAQA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,SAAQC,GAAR,QAAkB,WAAlB;AAGA,IAAMC,SAAS,GAAGZ,UAAU,CAAC,UAAAa,KAAK;AAAA,SAAK;AACnCC,IAAAA,KAAK,EAAE;AACLC,MAAAA,QAAQ,EAAE,CADL;AAELC,MAAAA,KAAK,EAAE,MAFF;AAGLC,MAAAA,eAAe,EAAEJ,KAAK,CAACK,OAAN,CAAcC,UAAd,CAAyBC,KAHrC;AAILC,MAAAA,MAAM,EAACR,KAAK,CAACS,OAAN,CAAc,CAAd,CAJF;AAKLC,MAAAA,MAAM,EAAE;AACJC,QAAAA,OAAO,EAAE,cADL;AAEJH,QAAAA,MAAM,EAAE,OAFJ;AAGJI,QAAAA,SAAS,EAAE;AAHP,OALH;AAUHC,MAAAA,KAAK,EAAE;AACLC,QAAAA,QAAQ,EAAE;AADL,OAVJ;AAcHC,MAAAA,GAAG,EAAE;AACHD,QAAAA,QAAQ,EAAE;AADP,OAdF;AAiBLE,MAAAA,WAAW,EAAC;AACRC,QAAAA,OAAO,EAAE;AADD,OAjBP;AAoBLC,MAAAA,QAAQ,EAAC;AACLV,QAAAA,MAAM,EAACR,KAAK,CAACS,OAAN,CAAc,CAAd,CADF;AAELU,QAAAA,MAAM,EAAE,MAAM;AAFT;AApBJ,KAD4B;AA2BjCC,IAAAA,SAAS,EAAC;AACNC,MAAAA,SAAS,EAAErB,KAAK,CAACS,OAAN,CAAc,CAAd;AADL,KA3BuB;AA8BjCa,IAAAA,YAAY,EAAE;AACVnB,MAAAA,KAAK,EAAE;AADG,KA9BmB;AAiCjCoB,IAAAA,eAAe,EAAE;AACbT,MAAAA,QAAQ,EAAEd,KAAK,CAACwB,UAAN,CAAiBC,OAAjB,CAAyB,EAAzB,CADG;AAEbC,MAAAA,UAAU,EAAE1B,KAAK,CAACwB,UAAN,CAAiBG;AAFhB,KAjCgB;AAqCjCC,IAAAA,aAAa,EAAE;AACXjB,MAAAA,OAAO,EAAE,MADE;AAEXkB,MAAAA,cAAc,EAAE,QAFL;AAGXC,MAAAA,QAAQ,EAAE,MAHC;AAIX,eAAS;AACTtB,QAAAA,MAAM,EAAER,KAAK,CAACS,OAAN,CAAc,GAAd;AADC;AAJE,KArCkB;AA8CjCsB,IAAAA,YAAY,EAAE;AACVpB,MAAAA,OAAO,EAAE;AADC,KA9CmB;AAiDjCqB,IAAAA,WAAW,EAAE;AACTxB,MAAAA,MAAM,EAAER,KAAK,CAACS,OAAN,CAAc,CAAd;AADC,KAjDoB;AAqDjCwB,IAAAA,IAAI,EAAE;AACF,8BAAwB;AACxBzB,QAAAA,MAAM,EAAER,KAAK,CAACS,OAAN,CAAc,CAAd,CADgB;AAExBN,QAAAA,KAAK,EAAE;AAFiB;AADtB,KArD2B;AA6DjC+B,IAAAA,QAAQ,EAAE;AACN,8BAAwB;AACxB1B,QAAAA,MAAM,EAAER,KAAK,CAACS,OAAN,CAAc,CAAd,CADgB;AAExBN,QAAAA,KAAK,EAAE;AAFiB;AADlB,KA7DuB;AAoEjCgC,IAAAA,OAAO,EAAE;AACLrB,MAAAA,QAAQ,EAAEd,KAAK,CAACwB,UAAN,CAAiBC,OAAjB,CAAyB,EAAzB;AADL,KApEwB;AAuEjCW,IAAAA,gBAAgB,EAAE;AACdtB,MAAAA,QAAQ,EAAEd,KAAK,CAACwB,UAAN,CAAiBC,OAAjB,CAAyB,EAAzB,CADI;AAEdY,MAAAA,KAAK,EAAErC,KAAK,CAACK,OAAN,CAAciC,IAAd,CAAmBC;AAFZ,KAvEe;AA2EjCC,IAAAA,IAAI,EAAE;AACFC,MAAAA,aAAa,EAAE,QADb;AAEFtB,MAAAA,MAAM,EAAE,EAFN;AAGFhB,MAAAA,KAAK,EAAE;AAHL,KA3E2B;AAgFjCuC,IAAAA,OAAO,EAAE;AACLC,MAAAA,UAAU,EAAE;AADP,KAhFwB;AAmFjCC,IAAAA,MAAM,EAAE;AACJC,MAAAA,SAAS,EAAE;AADP,KAnFyB;AAsFjCC,IAAAA,MAAM,EAAE;AACJC,MAAAA,UAAU,sBAAe/C,KAAK,CAACK,OAAN,CAAc2C,OAA7B,CADN;AAEJ/B,MAAAA,OAAO,EAAEjB,KAAK,CAACS,OAAN,CAAc,CAAd,EAAiB,CAAjB;AAFL,KAtFyB;AA0FjCwC,IAAAA,IAAI,EAAE;AACFZ,MAAAA,KAAK,EAAErC,KAAK,CAACK,OAAN,CAAc6C,OAAd,CAAsBC,IAD3B;AAEFC,MAAAA,cAAc,EAAE,MAFd;AAGF,iBAAW;AACXA,QAAAA,cAAc,EAAE;AADL;AAHT,KA1F2B;AAiGjCC,IAAAA,QAAQ,EAAE;AACNlD,MAAAA,KAAK,EAAE,KADD;AAENK,MAAAA,MAAM,EAAE,EAFF;AAGNJ,MAAAA,eAAe,EAAE;AAHX;AAjGuB,GAAL;AAAA,CAAN,CAA5B;AAuGI,IAAMkD,SAAS,GAAG;AACdC,EAAAA,YAAY,EAAE,MADA;AAEdC,EAAAA,YAAY,EAAE;AAFA,CAAlB;AAMJ,eAAe,SAASC,OAAT,GAAmB;AAC9B,MAAMC,YAAY,GAAG5D,GAAG,GAAC,WAAzB;;AAD8B,wBAEIZ,KAAK,CAACyE,QAAN,CAAe,EAAf,CAFJ;AAAA;AAAA,MAEvBC,SAFuB;AAAA,MAEZC,YAFY,wBAG7B;;;AACC3E,EAAAA,KAAK,CAAC4E,SAAN,CAAgB,YAAM;AAAA,aACLC,aADK;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,+BACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACyBC,KAAK,CAACN,YAAD,CAD9B;;AAAA;AACQO,gBAAAA,QADR;AAAA;AAAA,uBAEqBA,QAAQ,CAACC,IAAT,EAFrB;;AAAA;AAEQC,gBAAAA,IAFR;AAGEN,gBAAAA,YAAY,CAACM,IAAD,CAAZ;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADoB;AAAA;AAAA;;AAOpBJ,IAAAA,aAAa;AAEd,GATD,EASG,EATH;AAUAK,EAAAA,OAAO,CAACC,GAAR,CAAYT,SAAZ;AACF,MAAMU,OAAO,GAAGvE,SAAS,EAAzB;AACA,MAAMwE,OAAO,GAAGX,SAAS,CAACY,GAAV,CAAc,UAAAC,MAAM,EAAI;AACxC,QAAMC,WAAW,GAAGD,MAAM,CAAC5D,KAAP,CAAa,CAAb,EAAgB8D,WAAhB,EAApB;AACA;AACED,MAAAA,WAAW,EAAE,QAAQE,IAAR,CAAaF,WAAb,IAA4B,KAA5B,GAAoCA;AADnD,OAEKD,MAFL;AAID,GANiB,CAAhB;AAQF,SACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACM,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAO,IAAA,KAAK,EAAEnB,SAAd;AAAyB,IAAA,SAAS,EAAC,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEgB,OAAO,CAACzD,KAA/B;AAAsC,IAAA,KAAK,EAAC,SAA5C;AAAsD,IAAA,YAAY,MAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAIY;AAAM,IAAA,SAAS,EAAEyD,OAAO,CAACpC,QAAzB;AAAmC,IAAA,UAAU,MAA7C;AAA8C,IAAA,YAAY,EAAC,KAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,YAAD;AACI,IAAA,EAAE,EAAC,cADP;AAEI,IAAA,OAAO,EAAEqC,OAAO,CAACM,IAAR,CAAa,UAACC,CAAD,EAAIC,CAAJ;AAAA,aAAU,CAACA,CAAC,CAACL,WAAF,CAAcM,aAAd,CAA4BF,CAAC,CAACJ,WAA9B,CAAX;AAAA,KAAb,CAFb;AAGI,IAAA,OAAO,EAAE,iBAAAD,MAAM;AAAA,aAAIA,MAAM,CAACC,WAAX;AAAA,KAHnB;AAII,IAAA,cAAc,EAAE,wBAAAD,MAAM;AAAA,aAAIA,MAAM,CAAC5D,KAAX;AAAA,KAJ1B;AAKI,IAAA,KAAK,EAAE;AAAEV,MAAAA,KAAK,EAAE;AAAT,KALX;AAMI,IAAA,WAAW,EAAE,qBAAA8E,MAAM;AAAA,aAAI,oBAAC,SAAD,oBAAeA,MAAf;AAAuB,QAAA,KAAK,EAAC,iBAA7B;AAA+C,QAAA,OAAO,EAAC,UAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAJ;AAAA,KANvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EASI,oBAAC,SAAD;AACA,IAAA,QAAQ,MADR;AAEA,IAAA,EAAE,EAAC,mBAFH;AAGA,IAAA,KAAK,EAAC,WAHN;AAIA,IAAA,YAAY,EAAC,WAJb;AAKA,IAAA,OAAO,EAAC,UALR;AAMA,IAAA,IAAI,EAAC,OANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,EAiBI,oBAAC,SAAD;AACA,IAAA,EAAE,EAAC,yBADH;AAEA,IAAA,KAAK,EAAC,WAFN;AAGA,IAAA,YAAY,EAAC,kBAHb;AAIA,IAAA,OAAO,EAAC,UAJR;AAKA,IAAA,IAAI,EAAC,OALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBJ,EAwBI,oBAAC,SAAD;AACA,IAAA,EAAE,EAAC,0BADH;AAEA,IAAA,KAAK,EAAC,YAFN;AAGA,IAAA,YAAY,EAAC,YAHb;AAIA,IAAA,UAAU,EAAE;AACRC,MAAAA,QAAQ,EAAE;AADF,KAJZ;AAOA,IAAA,OAAO,EAAC,UAPR;AAQA,IAAA,IAAI,EAAC,OARL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxBJ,EAkCI,oBAAC,SAAD;AACA,IAAA,EAAE,EAAC,iBADH;AAEA,IAAA,KAAK,EAAC,UAFN;AAGA,IAAA,IAAI,EAAC,QAHL;AAIA,IAAA,eAAe,EAAE;AACbC,MAAAA,MAAM,EAAE;AADK,KAJjB;AAOA,IAAA,OAAO,EAAC,UAPR;AAQA,IAAA,IAAI,EAAC,OARL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlCJ,EA4CI,oBAAC,SAAD;AAAW,IAAA,EAAE,EAAC,iBAAd;AAAgC,IAAA,KAAK,EAAC,eAAtC;AAAsD,IAAA,IAAI,EAAC,MAA3D;AAAkE,IAAA,OAAO,EAAC,UAA1E;AAAqF,IAAA,IAAI,EAAC,OAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5CJ,EA6CI,oBAAC,SAAD;AACA,IAAA,EAAE,EAAC,qBADH;AAEA,IAAA,KAAK,EAAC,mBAFN;AAGA,IAAA,YAAY,EAAC,mBAHb;AAIA,IAAA,OAAO,EAAC,UAJR;AAKA,IAAA,IAAI,EAAC,OALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7CJ,EAoDK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApDL,EAqDY,oBAAC,MAAD;AACI,IAAA,OAAO,EAAC,WADZ;AAEI,IAAA,KAAK,EAAC,SAFV;AAGI,IAAA,SAAS,EAAEb,OAAO,CAACc,MAHvB;AAKI,IAAA,SAAS,EAAE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YArDZ,CAFR,CAJZ,CADF,CADF,CADN,EA4EM,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAO,IAAA,KAAK,EAAE9B,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEgB,OAAO,CAACzD,KAA/B;AAAsC,IAAA,KAAK,EAAC,SAA5C;AAAsD,IAAA,YAAY,MAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,CADJ,CADJ,CADJ,EAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,EAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,EAYI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAO,IAAA,KAAK,EAAEyC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEgB,OAAO,CAACzD,KAA/B;AAAsC,IAAA,KAAK,EAAC,SAA5C;AAAsD,IAAA,YAAY,MAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,CADJ,CADJ,CAZJ,CADJ,CA5EN,CADJ,CADJ;AA4GD","sourcesContent":["import React  from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport {\n    CardBody,\n    Col,\n    Row,\n    Form,\n    Card\n    \n} from 'reactstrap';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport SaveIcon from '@material-ui/icons/Save';\nimport {url} from 'axios/url';\n\n\nconst useStyles = makeStyles(theme => ({\n    root2: {\n      flexGrow: 1,\n      width: '100%',\n      backgroundColor: theme.palette.background.paper,\n      margin:theme.spacing(7),\n      bullet: {\n          display: 'inline-block',\n          margin: '0 2px',\n          transform: 'scale(0.8)',\n        },\n        title: {\n          fontSize: 12,\n            \n        },\n        pos: {\n          fontSize: 11,\n        },\n      cardContent:{\n          padding: 2,\n      },\n      cardroot:{\n          margin:theme.spacing(1),\n          height: 250 + 'px !important' ,\n      }\n      \n      },\n      alertmsge:{\n          marginTop: theme.spacing(2),\n      },\n      rootaccordia: {\n          width: '100%',\n      },\n      accordiaheading: {\n          fontSize: theme.typography.pxToRem(15),\n          fontWeight: theme.typography.fontWeightRegular,\n      },\n      allergiesroot: {\n          display: 'flex',\n          justifyContent: 'center',\n          flexWrap: 'wrap',\n          '& > *': {\n          margin: theme.spacing(0.5),\n          },\n      },\n      \n      checkboxroot: {\n          display: 'flex',\n      },\n      formControl: {\n          margin: theme.spacing(3),\n      },\n      \n      root: {\n          '& .MuiTextField-root': {\n          margin: theme.spacing(1),\n          width: 200,\n          },\n          \n      },\n  \n      formroot: {\n          '& .MuiTextField-root': {\n          margin: theme.spacing(1),\n          width: 200,\n          },\n      },\n  \n      heading: {\n          fontSize: theme.typography.pxToRem(15),\n      },\n      secondaryHeading: {\n          fontSize: theme.typography.pxToRem(15),\n          color: theme.palette.text.secondary,\n      },\n      icon: {\n          verticalAlign: 'bottom',\n          height: 20,\n          width: 20,\n      },\n      details: {\n          alignItems: 'center',\n      },\n      column: {\n          flexBasis: '33.33%',\n      },\n      helper: {\n          borderLeft: `2px solid ${theme.palette.divider}`,\n          padding: theme.spacing(1, 2),\n      },\n      link: {\n          color: theme.palette.primary.main,\n          textDecoration: 'none',\n          '&:hover': {\n          textDecoration: 'underline',\n          },\n      },\n      inforoot: {\n          width: '95%',\n          margin: 20,\n          backgroundColor: '#eee',\n      },\n      })); \n    const cardStyle = {\n        borbderColor: '#fff',\n        marginBottom: 10,\n    };\n\n\nexport default function Grouped() {\n    const apicountries = url+\"countries\";\n    const [countries, setCountries] = React.useState([]);\n     //Get countries     \n      React.useEffect(() => {\n        async function getCharacters() {\n          const response = await fetch(apicountries);\n          const body = await response.json();\n          setCountries(body);\n          \n        }\n        getCharacters();\n       \n      }, []);\n      console.log(countries);\n    const classes = useStyles(); \n    const options = countries.map(option => {\n    const firstLetter = option.title[0].toUpperCase();\n    return {\n      firstLetter: /[0-9]/.test(firstLetter) ? '0-9' : firstLetter,\n      ...option,\n    };\n  });\n\n  return (\n      <Form >\n          <Row>\n                <Col lg={4} >\n                  <Card  style={cardStyle} className=\" p-3\">\n                    <CardBody>\n                        <Typography className={classes.title} color=\"primary\" gutterBottom>\n                                        Drug Order\n                        </Typography>\n                                <form className={classes.formroot} noValidate autoComplete=\"off\">\n                                        \n                                        <div>\n                                        <Autocomplete\n                                            id=\"grouped-demo\"\n                                            options={options.sort((a, b) => -b.firstLetter.localeCompare(a.firstLetter))}\n                                            groupBy={option => option.firstLetter}\n                                            getOptionLabel={option => option.title}\n                                            style={{ width: 300 }}\n                                            renderInput={params => <TextField {...params} label=\"With categories\" variant=\"outlined\" />}\n                                        />\n                                            <TextField\n                                            disabled\n                                            id=\"outlined-required\"\n                                            label=\"Drug Unit\"\n                                            defaultValue=\"Drug Unit\"\n                                            variant=\"outlined\"\n                                            size=\"small\"\n                                            />\n                                            <TextField\n                                            id=\"outlined-password-input\"\n                                            label=\"Frequency\"\n                                            autoComplete=\"current-password\"\n                                            variant=\"outlined\"\n                                            size=\"small\"\n                                            />\n                                            <TextField\n                                            id=\"outlined-read-only-input\"\n                                            label=\"Start Date\"\n                                            defaultValue=\"Start Date\"\n                                            InputProps={{\n                                                readOnly: true,\n                                            }}\n                                            variant=\"outlined\"\n                                            size=\"small\"\n                                            />\n                                            <TextField\n                                            id=\"outlined-number\"\n                                            label=\"Duration\"\n                                            type=\"number\"\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                            variant=\"outlined\"\n                                            size=\"small\"\n                                            />\n                                            <TextField id=\"outlined-search\" label=\"Duration Unit\" type=\"text\" variant=\"outlined\" size=\"small\"/>\n                                            <TextField\n                                            id=\"outlined-helperText\"\n                                            label=\"Enter Instruction\"\n                                            defaultValue=\"Enter Instruction\"\n                                            variant=\"outlined\"\n                                            size=\"small\"\n                                            />\n                                             <br/>\n                                                    <Button\n                                                        variant=\"contained\"\n                                                        color=\"primary\"\n                                                        className={classes.button}\n                                                    \n                                                        startIcon={<SaveIcon />}\n                                                    >\n                                                        Save\n                                                    </Button>\n                                        </div>\n                                    </form> \n                    </CardBody>\n                  </Card>\n                </Col>\n                <Col lg={8} >\n                    <Row>\n                        <Col lg={12} >\n                            <Card  style={cardStyle} >\n                                <CardBody>\n                                    <Typography className={classes.title} color=\"primary\" gutterBottom>\n                                            Previous Order\n                                    </Typography>                   \n                                </CardBody>\n                            </Card>\n                        </Col>\n                        <br/>\n                        <br/>\n                        <Col lg={12} >\n                            <Card  style={cardStyle} >\n                                <CardBody>\n                                    <Typography className={classes.title} color=\"primary\" gutterBottom>\n                                            Current Order\n                                    </Typography>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n                  \n                </Col>\n               \n              </Row>\n      </Form>\n    \n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}