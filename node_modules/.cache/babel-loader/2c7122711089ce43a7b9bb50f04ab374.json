{"ast":null,"code":"import _regeneratorRuntime from \"/Users/matosky/react-reduction1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/matosky/react-reduction1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/Users/matosky/react-reduction1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/matosky/react-reduction1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/matosky/react-reduction1/src/components/Hiv/Medication/Medication.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { CardBody, Col, Row, Form, Card } from 'reactstrap';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport SaveIcon from '@material-ui/icons/Save';\nimport { url } from 'axios/url';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root2: {\n      flexGrow: 1,\n      width: '100%',\n      backgroundColor: theme.palette.background.paper,\n      margin: theme.spacing(7),\n      bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)'\n      },\n      title: {\n        fontSize: 12\n      },\n      pos: {\n        fontSize: 11\n      },\n      cardContent: {\n        padding: 2\n      },\n      cardroot: {\n        margin: theme.spacing(1),\n        height: 250 + 'px !important'\n      }\n    },\n    alertmsge: {\n      marginTop: theme.spacing(2)\n    },\n    rootaccordia: {\n      width: '100%'\n    },\n    accordiaheading: {\n      fontSize: theme.typography.pxToRem(15),\n      fontWeight: theme.typography.fontWeightRegular\n    },\n    allergiesroot: {\n      display: 'flex',\n      justifyContent: 'center',\n      flexWrap: 'wrap',\n      '& > *': {\n        margin: theme.spacing(0.5)\n      }\n    },\n    checkboxroot: {\n      display: 'flex'\n    },\n    formControl: {\n      margin: theme.spacing(3)\n    },\n    root: {\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        width: 200\n      }\n    },\n    formroot: {\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        width: 200\n      }\n    },\n    heading: {\n      fontSize: theme.typography.pxToRem(15)\n    },\n    secondaryHeading: {\n      fontSize: theme.typography.pxToRem(15),\n      color: theme.palette.text.secondary\n    },\n    icon: {\n      verticalAlign: 'bottom',\n      height: 20,\n      width: 20\n    },\n    details: {\n      alignItems: 'center'\n    },\n    column: {\n      flexBasis: '33.33%'\n    },\n    helper: {\n      borderLeft: \"2px solid \".concat(theme.palette.divider),\n      padding: theme.spacing(1, 2)\n    },\n    link: {\n      color: theme.palette.primary.main,\n      textDecoration: 'none',\n      '&:hover': {\n        textDecoration: 'underline'\n      }\n    },\n    inforoot: {\n      width: '95%',\n      margin: 20,\n      backgroundColor: '#eee'\n    }\n  };\n});\nvar cardStyle = {\n  borbderColor: '#fff',\n  marginBottom: 10\n};\nexport default function Grouped() {\n  var apicountries = url + \"countries\";\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      countries = _React$useState2[0],\n      setCountries = _React$useState2[1]; //Get countries\n\n\n  useEffect(function () {\n    function getCharacters() {\n      return _getCharacters.apply(this, arguments);\n    }\n\n    function _getCharacters() {\n      _getCharacters = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var response, body, defaultCountryId;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return fetch(apicountries);\n\n              case 3:\n                response = _context.sent;\n                _context.next = 6;\n                return response.json();\n\n              case 6:\n                body = _context.sent;\n                setCountries(body.map(function (_ref) {\n                  var name = _ref.name,\n                      id = _ref.id;\n                  return {\n                    label: name,\n                    value: id\n                  };\n                }));\n                defaultCountryId = body.find(function (x) {\n                  return x.name === 'Nigeria';\n                }).id;\n                setPatient(_objectSpread({}, patient, {\n                  countryId: defaultCountryId\n                }));\n                setStateByCountryId(defaultCountryId);\n                _context.next = 16;\n                break;\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 13]]);\n      }));\n      return _getCharacters.apply(this, arguments);\n    }\n\n    getCharacters();\n  }, []);\n  React.useEffect(function () {\n    function getCharacters() {\n      return _getCharacters2.apply(this, arguments);\n    }\n\n    function _getCharacters2() {\n      _getCharacters2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var response, body;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return fetch(\"http://10.167.4.185:8080/api/countries\");\n\n              case 2:\n                response = _context2.sent;\n                _context2.next = 5;\n                return response.json();\n\n              case 5:\n                body = _context2.sent;\n                setItems(body.map(function (_ref2) {\n                  var name = _ref2.name,\n                      id = _ref2.id;\n                  return {\n                    label: name,\n                    value: id\n                  };\n                }));\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      return _getCharacters2.apply(this, arguments);\n    }\n\n    getCharacters();\n  }, []);\n  var classes = useStyles();\n  var options = countries.map(function (option) {\n    var firstLetter = option.title[0].toUpperCase();\n    return _objectSpread({\n      firstLetter: /[0-9]/.test(firstLetter) ? '0-9' : firstLetter\n    }, option);\n  });\n  return React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(Col, {\n    lg: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(Card, {\n    style: cardStyle,\n    className: \" p-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.title,\n    color: \"primary\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, \"Drug Order\"), React.createElement(\"form\", {\n    className: classes.formroot,\n    noValidate: true,\n    autoComplete: \"off\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(Autocomplete, {\n    id: \"grouped-demo\",\n    options: options.sort(function (a, b) {\n      return -b.firstLetter.localeCompare(a.firstLetter);\n    }),\n    groupBy: function groupBy(option) {\n      return option.firstLetter;\n    },\n    getOptionLabel: function getOptionLabel(option) {\n      return option.title;\n    },\n    style: {\n      width: 300\n    },\n    renderInput: function renderInput(params) {\n      return React.createElement(TextField, Object.assign({}, params, {\n        label: \"With categories\",\n        variant: \"outlined\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    disabled: true,\n    id: \"outlined-required\",\n    label: \"Drug Unit\",\n    defaultValue: \"Drug Unit\",\n    variant: \"outlined\",\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    id: \"outlined-password-input\",\n    label: \"Frequency\",\n    autoComplete: \"current-password\",\n    variant: \"outlined\",\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    id: \"outlined-read-only-input\",\n    label: \"Start Date\",\n    defaultValue: \"Start Date\",\n    InputProps: {\n      readOnly: true\n    },\n    variant: \"outlined\",\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    id: \"outlined-number\",\n    label: \"Duration\",\n    type: \"number\",\n    InputLabelProps: {\n      shrink: true\n    },\n    variant: \"outlined\",\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    id: \"outlined-search\",\n    label: \"Duration Unit\",\n    type: \"text\",\n    variant: \"outlined\",\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    id: \"outlined-helperText\",\n    label: \"Enter Instruction\",\n    defaultValue: \"Enter Instruction\",\n    variant: \"outlined\",\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.button,\n    startIcon: React.createElement(SaveIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }, \"Save\")))))), React.createElement(Col, {\n    lg: 8,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  }, React.createElement(Col, {\n    lg: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, React.createElement(Card, {\n    style: cardStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }, React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.title,\n    color: \"primary\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248\n    },\n    __self: this\n  }, \"Previous Order\")))), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  }), React.createElement(Col, {\n    lg: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256\n    },\n    __self: this\n  }, React.createElement(Card, {\n    style: cardStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }, React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.title,\n    color: \"primary\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  }, \"Current Order\"))))))));\n} // Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\n\nvar top100Films = [{\n  title: 'The Shawshank Redemption',\n  year: 1994\n}, {\n  title: 'The Godfather',\n  year: 1972\n}, {\n  title: 'The Godfather: Part II',\n  year: 1974\n}, {\n  title: 'The Dark Knight',\n  year: 2008\n}, {\n  title: '12 Angry Men',\n  year: 1957\n}, {\n  title: \"Schindler's List\",\n  year: 1993\n}, {\n  title: 'Pulp Fiction',\n  year: 1994\n}, {\n  title: 'The Lord of the Rings: The Return of the King',\n  year: 2003\n}, {\n  title: 'The Good, the Bad and the Ugly',\n  year: 1966\n}, {\n  title: 'Fight Club',\n  year: 1999\n}, {\n  title: 'The Lord of the Rings: The Fellowship of the Ring',\n  year: 2001\n}, {\n  title: 'Star Wars: Episode V - The Empire Strikes Back',\n  year: 1980\n}, {\n  title: 'Forrest Gump',\n  year: 1994\n}, {\n  title: 'Inception',\n  year: 2010\n}, {\n  title: 'The Lord of the Rings: The Two Towers',\n  year: 2002\n}, {\n  title: \"One Flew Over the Cuckoo's Nest\",\n  year: 1975\n}, {\n  title: 'Goodfellas',\n  year: 1990\n}, {\n  title: 'The Matrix',\n  year: 1999\n}, {\n  title: 'Seven Samurai',\n  year: 1954\n}, {\n  title: 'Star Wars: Episode IV - A New Hope',\n  year: 1977\n}, {\n  title: 'City of God',\n  year: 2002\n}, {\n  title: 'Se7en',\n  year: 1995\n}, {\n  title: 'The Silence of the Lambs',\n  year: 1991\n}, {\n  title: \"It's a Wonderful Life\",\n  year: 1946\n}, {\n  title: 'Life Is Beautiful',\n  year: 1997\n}, {\n  title: 'The Usual Suspects',\n  year: 1995\n}, {\n  title: 'Léon: The Professional',\n  year: 1994\n}, {\n  title: 'Spirited Away',\n  year: 2001\n}, {\n  title: 'Saving Private Ryan',\n  year: 1998\n}, {\n  title: 'Once Upon a Time in the West',\n  year: 1968\n}, {\n  title: 'American History X',\n  year: 1998\n}, {\n  title: 'Interstellar',\n  year: 2014\n}, {\n  title: 'Casablanca',\n  year: 1942\n}, {\n  title: 'City Lights',\n  year: 1931\n}, {\n  title: 'Psycho',\n  year: 1960\n}, {\n  title: 'The Green Mile',\n  year: 1999\n}, {\n  title: 'The Intouchables',\n  year: 2011\n}, {\n  title: 'Modern Times',\n  year: 1936\n}, {\n  title: 'Raiders of the Lost Ark',\n  year: 1981\n}, {\n  title: 'Rear Window',\n  year: 1954\n}, {\n  title: 'The Pianist',\n  year: 2002\n}, {\n  title: 'The Departed',\n  year: 2006\n}, {\n  title: 'Terminator 2: Judgment Day',\n  year: 1991\n}, {\n  title: 'Back to the Future',\n  year: 1985\n}, {\n  title: 'Whiplash',\n  year: 2014\n}, {\n  title: 'Gladiator',\n  year: 2000\n}, {\n  title: 'Memento',\n  year: 2000\n}, {\n  title: 'The Prestige',\n  year: 2006\n}, {\n  title: 'The Lion King',\n  year: 1994\n}, {\n  title: 'Apocalypse Now',\n  year: 1979\n}, {\n  title: 'Alien',\n  year: 1979\n}, {\n  title: 'Sunset Boulevard',\n  year: 1950\n}, {\n  title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n  year: 1964\n}, {\n  title: 'The Great Dictator',\n  year: 1940\n}, {\n  title: 'Cinema Paradiso',\n  year: 1988\n}, {\n  title: 'The Lives of Others',\n  year: 2006\n}, {\n  title: 'Grave of the Fireflies',\n  year: 1988\n}, {\n  title: 'Paths of Glory',\n  year: 1957\n}, {\n  title: 'Django Unchained',\n  year: 2012\n}, {\n  title: 'The Shining',\n  year: 1980\n}, {\n  title: 'WALL·E',\n  year: 2008\n}, {\n  title: 'American Beauty',\n  year: 1999\n}, {\n  title: 'The Dark Knight Rises',\n  year: 2012\n}, {\n  title: 'Princess Mononoke',\n  year: 1997\n}, {\n  title: 'Aliens',\n  year: 1986\n}, {\n  title: 'Oldboy',\n  year: 2003\n}, {\n  title: 'Once Upon a Time in America',\n  year: 1984\n}, {\n  title: 'Witness for the Prosecution',\n  year: 1957\n}, {\n  title: 'Das Boot',\n  year: 1981\n}, {\n  title: 'Citizen Kane',\n  year: 1941\n}, {\n  title: 'North by Northwest',\n  year: 1959\n}, {\n  title: 'Vertigo',\n  year: 1958\n}, {\n  title: 'Star Wars: Episode VI - Return of the Jedi',\n  year: 1983\n}, {\n  title: 'Reservoir Dogs',\n  year: 1992\n}, {\n  title: 'Braveheart',\n  year: 1995\n}, {\n  title: 'M',\n  year: 1931\n}, {\n  title: 'Requiem for a Dream',\n  year: 2000\n}, {\n  title: 'Amélie',\n  year: 2001\n}, {\n  title: 'A Clockwork Orange',\n  year: 1971\n}, {\n  title: 'Like Stars on Earth',\n  year: 2007\n}, {\n  title: 'Taxi Driver',\n  year: 1976\n}, {\n  title: 'Lawrence of Arabia',\n  year: 1962\n}, {\n  title: 'Double Indemnity',\n  year: 1944\n}, {\n  title: 'Eternal Sunshine of the Spotless Mind',\n  year: 2004\n}, {\n  title: 'Amadeus',\n  year: 1984\n}, {\n  title: 'To Kill a Mockingbird',\n  year: 1962\n}, {\n  title: 'Toy Story 3',\n  year: 2010\n}, {\n  title: 'Logan',\n  year: 2017\n}, {\n  title: 'Full Metal Jacket',\n  year: 1987\n}, {\n  title: 'Dangal',\n  year: 2016\n}, {\n  title: 'The Sting',\n  year: 1973\n}, {\n  title: '2001: A Space Odyssey',\n  year: 1968\n}, {\n  title: \"Singin' in the Rain\",\n  year: 1952\n}, {\n  title: 'Toy Story',\n  year: 1995\n}, {\n  title: 'Bicycle Thieves',\n  year: 1948\n}, {\n  title: 'The Kid',\n  year: 1921\n}, {\n  title: 'Inglourious Basterds',\n  year: 2009\n}, {\n  title: 'Snatch',\n  year: 2000\n}, {\n  title: '3 Idiots',\n  year: 2009\n}, {\n  title: 'Monty Python and the Holy Grail',\n  year: 1975\n}];","map":{"version":3,"sources":["/Users/matosky/react-reduction1/src/components/Hiv/Medication/Medication.jsx"],"names":["React","useState","useEffect","makeStyles","TextField","Autocomplete","CardBody","Col","Row","Form","Card","Typography","Button","SaveIcon","url","useStyles","theme","root2","flexGrow","width","backgroundColor","palette","background","paper","margin","spacing","bullet","display","transform","title","fontSize","pos","cardContent","padding","cardroot","height","alertmsge","marginTop","rootaccordia","accordiaheading","typography","pxToRem","fontWeight","fontWeightRegular","allergiesroot","justifyContent","flexWrap","checkboxroot","formControl","root","formroot","heading","secondaryHeading","color","text","secondary","icon","verticalAlign","details","alignItems","column","flexBasis","helper","borderLeft","divider","link","primary","main","textDecoration","inforoot","cardStyle","borbderColor","marginBottom","Grouped","apicountries","countries","setCountries","getCharacters","fetch","response","json","body","map","name","id","label","value","defaultCountryId","find","x","setPatient","patient","countryId","setStateByCountryId","console","log","setItems","classes","options","option","firstLetter","toUpperCase","test","sort","a","b","localeCompare","params","readOnly","shrink","button","top100Films","year"],"mappings":"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","sourcesContent":["import React , { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport {\n    CardBody,\n    Col,\n    Row,\n    Form,\n    Card\n    \n} from 'reactstrap';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport SaveIcon from '@material-ui/icons/Save';\nimport {url} from 'axios/url';\n\n\nconst useStyles = makeStyles(theme => ({\n    root2: {\n      flexGrow: 1,\n      width: '100%',\n      backgroundColor: theme.palette.background.paper,\n      margin:theme.spacing(7),\n      bullet: {\n          display: 'inline-block',\n          margin: '0 2px',\n          transform: 'scale(0.8)',\n        },\n        title: {\n          fontSize: 12,\n            \n        },\n        pos: {\n          fontSize: 11,\n        },\n      cardContent:{\n          padding: 2,\n      },\n      cardroot:{\n          margin:theme.spacing(1),\n          height: 250 + 'px !important' ,\n      }\n      \n      },\n      alertmsge:{\n          marginTop: theme.spacing(2),\n      },\n      rootaccordia: {\n          width: '100%',\n      },\n      accordiaheading: {\n          fontSize: theme.typography.pxToRem(15),\n          fontWeight: theme.typography.fontWeightRegular,\n      },\n      allergiesroot: {\n          display: 'flex',\n          justifyContent: 'center',\n          flexWrap: 'wrap',\n          '& > *': {\n          margin: theme.spacing(0.5),\n          },\n      },\n      \n      checkboxroot: {\n          display: 'flex',\n      },\n      formControl: {\n          margin: theme.spacing(3),\n      },\n      \n      root: {\n          '& .MuiTextField-root': {\n          margin: theme.spacing(1),\n          width: 200,\n          },\n          \n      },\n  \n      formroot: {\n          '& .MuiTextField-root': {\n          margin: theme.spacing(1),\n          width: 200,\n          },\n      },\n  \n      heading: {\n          fontSize: theme.typography.pxToRem(15),\n      },\n      secondaryHeading: {\n          fontSize: theme.typography.pxToRem(15),\n          color: theme.palette.text.secondary,\n      },\n      icon: {\n          verticalAlign: 'bottom',\n          height: 20,\n          width: 20,\n      },\n      details: {\n          alignItems: 'center',\n      },\n      column: {\n          flexBasis: '33.33%',\n      },\n      helper: {\n          borderLeft: `2px solid ${theme.palette.divider}`,\n          padding: theme.spacing(1, 2),\n      },\n      link: {\n          color: theme.palette.primary.main,\n          textDecoration: 'none',\n          '&:hover': {\n          textDecoration: 'underline',\n          },\n      },\n      inforoot: {\n          width: '95%',\n          margin: 20,\n          backgroundColor: '#eee',\n      },\n      })); \n    const cardStyle = {\n        borbderColor: '#fff',\n        marginBottom: 10,\n    };\n\n\nexport default function Grouped() {\n    const apicountries = url+\"countries\";\n    const [countries, setCountries] = React.useState([]);\n     //Get countries\n     useEffect(() => {\n        async function getCharacters() {\n            try{\n          const response = await fetch(apicountries);\n          const body = await response.json();          \n          setCountries(body.map(({ name, id }) => ({ label: name, value: id })));\n          const defaultCountryId = body.find(x => x.name === 'Nigeria').id;\n          setPatient({...patient, countryId: defaultCountryId});\n          setStateByCountryId(defaultCountryId);\n          }catch(error){\n              console.log(error);\n          }\n        }\n        getCharacters();\n      }, []);\n\n      React.useEffect(() => {\n        async function getCharacters() {\n          const response = await fetch(\"http://10.167.4.185:8080/api/countries\");\n          const body = await response.json();\n          setItems(body.map(({ name, id }) => ({ label: name, value: id })));\n        }\n        getCharacters();\n      }, []);\n    const classes = useStyles(); \n    const options = countries.map(option => {\n    const firstLetter = option.title[0].toUpperCase();\n    return {\n      firstLetter: /[0-9]/.test(firstLetter) ? '0-9' : firstLetter,\n      ...option,\n    };\n  });\n\n  return (\n      <Form >\n          <Row>\n                <Col lg={4} >\n                  <Card  style={cardStyle} className=\" p-3\">\n                    <CardBody>\n                        <Typography className={classes.title} color=\"primary\" gutterBottom>\n                                        Drug Order\n                        </Typography>\n                                <form className={classes.formroot} noValidate autoComplete=\"off\">\n                                        \n                                        <div>\n                                        <Autocomplete\n                                            id=\"grouped-demo\"\n                                            options={options.sort((a, b) => -b.firstLetter.localeCompare(a.firstLetter))}\n                                            groupBy={option => option.firstLetter}\n                                            getOptionLabel={option => option.title}\n                                            style={{ width: 300 }}\n                                            renderInput={params => <TextField {...params} label=\"With categories\" variant=\"outlined\" />}\n                                        />\n                                            <TextField\n                                            disabled\n                                            id=\"outlined-required\"\n                                            label=\"Drug Unit\"\n                                            defaultValue=\"Drug Unit\"\n                                            variant=\"outlined\"\n                                            size=\"small\"\n                                            />\n                                            <TextField\n                                            id=\"outlined-password-input\"\n                                            label=\"Frequency\"\n                                            autoComplete=\"current-password\"\n                                            variant=\"outlined\"\n                                            size=\"small\"\n                                            />\n                                            <TextField\n                                            id=\"outlined-read-only-input\"\n                                            label=\"Start Date\"\n                                            defaultValue=\"Start Date\"\n                                            InputProps={{\n                                                readOnly: true,\n                                            }}\n                                            variant=\"outlined\"\n                                            size=\"small\"\n                                            />\n                                            <TextField\n                                            id=\"outlined-number\"\n                                            label=\"Duration\"\n                                            type=\"number\"\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                            variant=\"outlined\"\n                                            size=\"small\"\n                                            />\n                                            <TextField id=\"outlined-search\" label=\"Duration Unit\" type=\"text\" variant=\"outlined\" size=\"small\"/>\n                                            <TextField\n                                            id=\"outlined-helperText\"\n                                            label=\"Enter Instruction\"\n                                            defaultValue=\"Enter Instruction\"\n                                            variant=\"outlined\"\n                                            size=\"small\"\n                                            />\n                                             <br/>\n                                                    <Button\n                                                        variant=\"contained\"\n                                                        color=\"primary\"\n                                                        className={classes.button}\n                                                    \n                                                        startIcon={<SaveIcon />}\n                                                    >\n                                                        Save\n                                                    </Button>\n                                        </div>\n                                    </form> \n                    </CardBody>\n                  </Card>\n                </Col>\n                <Col lg={8} >\n                    <Row>\n                        <Col lg={12} >\n                            <Card  style={cardStyle} >\n                                <CardBody>\n                                    <Typography className={classes.title} color=\"primary\" gutterBottom>\n                                            Previous Order\n                                    </Typography>                   \n                                </CardBody>\n                            </Card>\n                        </Col>\n                        <br/>\n                        <br/>\n                        <Col lg={12} >\n                            <Card  style={cardStyle} >\n                                <CardBody>\n                                    <Typography className={classes.title} color=\"primary\" gutterBottom>\n                                            Current Order\n                                    </Typography>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n                  \n                </Col>\n               \n              </Row>\n      </Form>\n    \n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'Léon: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  { title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb', year: 1964 },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL·E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Amélie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];"]},"metadata":{},"sourceType":"module"}