{"ast":null,"code":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['exports', 'react', 'prop-types', 'jquery', 'moment', 'uuid', 'eonasdan-bootstrap-datetimepicker/src/js/bootstrap-datetimepicker.js'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports, require('react'), require('prop-types'), require('jquery'), require('moment'), require('uuid'), require('eonasdan-bootstrap-datetimepicker/src/js/bootstrap-datetimepicker.js'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports, global.react, global.propTypes, global.jquery, global.moment, global.uuid, global.bootstrapDatetimepicker);\n    global.dateTime = mod.exports;\n  }\n})(this, function (exports, _react, _propTypes, _jquery, _moment, _uuid) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.DateTime = undefined;\n\n  var _react2 = _interopRequireDefault(_react);\n\n  var _propTypes2 = _interopRequireDefault(_propTypes);\n\n  var _jquery2 = _interopRequireDefault(_jquery);\n\n  var _moment2 = _interopRequireDefault(_moment);\n\n  var _uuid2 = _interopRequireDefault(_uuid);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  var _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  function _possibleConstructorReturn(self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n\n  var uuidV4 = _uuid2.default.v4;\n  var defaultPickerOptions = {\n    viewMode: 'days',\n    allowInputToggle: true,\n    locale: 'en',\n    format: 'L LTS',\n    calendarWeeks: false,\n    toolbarPlacement: 'default',\n    tooltips: {\n      today: 'Go to today',\n      clear: 'Clear selection',\n      close: 'Close the picker',\n      selectMonth: 'Select Month',\n      prevMonth: 'Previous Month',\n      nextMonth: 'Next Month',\n      selectYear: 'Select Year',\n      prevYear: 'Previous Year',\n      nextYear: 'Next Year',\n      selectDecade: 'Select Decade',\n      prevDecade: 'Previous Decade',\n      nextDecade: 'Next Decade',\n      prevCentury: 'Previous Century',\n      nextCentury: 'Next Century'\n    },\n    widgetPositioning: {\n      horizontal: 'auto',\n      vertical: 'bottom'\n    },\n    focusOnShow: true\n  };\n\n  var DateTime = function (_React$Component) {\n    _inherits(DateTime, _React$Component);\n\n    function DateTime() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, DateTime);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DateTime.__proto__ || Object.getPrototypeOf(DateTime)).call.apply(_ref, [this].concat(args))), _this), _this.arePropsUpdating = false, _this.componentDidUpdate = function (prevProps) {\n        var value = _this.props.value;\n\n        if (prevProps.value !== value) {\n          _this.arePropsUpdating = true;\n\n          _this.updateValue(value);\n\n          _this.arePropsUpdating = false;\n        }\n      }, _this.updateValue = function (value) {\n        if (!_this.datePicker) {\n          return;\n        }\n\n        var format = _this.props.pickerOptions.format;\n\n        if (value !== undefined && value !== null) {\n          if (_moment2.default.isMoment(value) || value.trim().length) {\n            _this.datePicker.date(value);\n\n            if (!_moment2.default.isMoment(value)) {\n              value = (0, _moment2.default)(value);\n            }\n\n            _this.textInputElement.value = value.format(format);\n            return;\n          }\n        }\n\n        _this.textInputElement && (_this.textInputElement.value = \"\");\n\n        _this.datePicker.clear();\n      }, _this.componentWillUnmount = function () {\n        if (_this.datePicker) {\n          _this.datePicker.destroy();\n\n          _this.datePicker = null;\n          _this.datePickerElement = null;\n          _this.textInputElement = null;\n        }\n      }, _this.setRef = function (ref) {\n        _this.textInputElement = ref;\n      }, _this.onChange = function (event) {\n        if (_this.arePropsUpdating) {\n          return;\n        }\n\n        var date = event.date;\n        var isoDate = date && date.toISOString && date.toISOString() || '';\n        return _this.props.onChange(isoDate, {\n          value: _this.textInputElement.value,\n          date: date,\n          isoDate: isoDate\n        });\n      }, _this.selectTextElementContent = function (event) {\n        setTimeout(event.target.select.bind(event.target));\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    _createClass(DateTime, [{\n      key: 'componentWillMount',\n      value: function componentWillMount() {\n        var _props$id = this.props.id,\n            componentId = _props$id === undefined ? \"date-time-picker\" : _props$id;\n        this.id = componentId + '-' + uuidV4();\n      }\n    }, {\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        var _props = this.props,\n            value = _props.value,\n            onChange = _props.onChange;\n        var id = this.id;\n        var pickerOptions = this.props.pickerOptions;\n        pickerOptions = _extends({}, defaultPickerOptions, pickerOptions);\n        this.datePickerElement = (0, _jquery2.default)('#' + id);\n        this.dateTimePicker = this.datePickerElement.datetimepicker(pickerOptions);\n        this.datePicker = this.datePickerElement.data(\"DateTimePicker\");\n        this.updateValue(value);\n        this.dateTimePicker.on('dp.change', this.onChange);\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _props2 = this.props,\n            name = _props2.name,\n            placeholder = _props2.placeholder,\n            disabled = _props2.disabled,\n            required = _props2.required,\n            readOnly = _props2.readOnly,\n            bsStyle = _props2.bsStyle,\n            _props2$id = _props2.id,\n            componentId = _props2$id === undefined ? \"date-time-picker\" : _props2$id,\n            _props2$className = _props2.className,\n            className = _props2$className === undefined ? \"\" : _props2$className;\n        var id = this.id;\n        var bsClass = bsStyle ? 'has-' + bsStyle : ''; // Input needs to be inside a position relative element for datetimepicker to work.\n\n        return _react2.default.createElement('div', {\n          style: {\n            position: \"relative\"\n          },\n          id: componentId,\n          className: className\n        }, _react2.default.createElement('input', {\n          id: id,\n          ref: this.setRef,\n          className: bsClass + ' form-control date-time',\n          type: 'text',\n          name: name,\n          required: required,\n          disabled: disabled,\n          readOnly: readOnly,\n          placeholder: placeholder,\n          onFocus: this.selectTextElementContent\n        }));\n      }\n    }]);\n\n    return DateTime;\n  }(_react2.default.Component);\n\n  DateTime.propTypes = {\n    id: _propTypes2.default.string,\n    className: _propTypes2.default.string,\n    placeholder: _propTypes2.default.string,\n    bsStyle: _propTypes2.default.oneOf(['', 'success', 'warning', 'error']),\n    onChange: _propTypes2.default.func,\n    disabled: _propTypes2.default.bool,\n    required: _propTypes2.default.bool,\n    readOnly: _propTypes2.default.bool,\n    value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object] //Accept a moment object\n    ),\n    pickerOptions: _propTypes2.default.shape({\n      format: _propTypes2.default.string,\n      locale: _propTypes2.default.string,\n      minDate: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object])),\n      maxDate: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object])),\n      disabledDates: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object])),\n      daysOfWeekDisabled: _propTypes2.default.arrayOf(_propTypes2.default.number),\n      viewMode: _propTypes2.default.oneOf(['decades', 'years', 'months', 'days']),\n      allowInputToggle: _propTypes2.default.bool,\n      calendarWeeks: _propTypes2.default.bool,\n      toolbarPlacement: _propTypes2.default.oneOf(['default', 'top', 'bottom']),\n      tooltips: _propTypes2.default.shape({\n        today: _propTypes2.default.string,\n        clear: _propTypes2.default.string,\n        close: _propTypes2.default.string,\n        selectMonth: _propTypes2.default.string,\n        prevMonth: _propTypes2.default.string,\n        nextMonth: _propTypes2.default.string,\n        selectYear: _propTypes2.default.string,\n        prevYear: _propTypes2.default.string,\n        nextYear: _propTypes2.default.string,\n        selectDecade: _propTypes2.default.string,\n        prevDecade: _propTypes2.default.string,\n        nextDecade: _propTypes2.default.string,\n        prevCentury: _propTypes2.default.string,\n        nextCentury: _propTypes2.default.string\n      }),\n      widgetPositioning: _propTypes2.default.object,\n      focusOnShow: _propTypes2.default.bool\n    })\n  };\n  DateTime.defaultProps = {\n    id: \"react-datetime-bootstrap\",\n    onChange: function onChange() {\n      return null;\n    },\n    pickerOptions: _extends({}, defaultPickerOptions) // The dateTimePicker internals use jquery and events to notify onChange. This triggers when we update props.\n    // Use `arePropsUpdating` to determine when to notify parent.\n\n  };\n  ;\n  exports.DateTime = DateTime;\n});","map":null,"metadata":{},"sourceType":"script"}