"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
function arrayFindIndex(array, predicate) {
    var index = 0;
    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
        var item = array_1[_i];
        if (predicate(item)) {
            return index;
        }
        index++;
    }
    return -1;
}
function useMedia(queries, values, defaultValue, useDependencies) {
    if (useDependencies === void 0) { useDependencies = false; }
    // Array containing a media query list for each query
    var mediaQueryLists = react_1.useMemo(function () { return queries.map(function (q) { return window.matchMedia(q); }); }, 
    // eslint-disable-next-line react-hooks/exhaustive-deps
    useDependencies ? [queries] : []);
    // Function that gets value based on matching media query
    var getValue = react_1.useCallback(function () {
        // Get index of first media query that matches
        var index = arrayFindIndex(mediaQueryLists, function (mql) { return mql.matches; });
        // Return related value or defaultValue if none
        return typeof values[index] !== 'undefined' ? values[index] : defaultValue;
    }, 
    // eslint-disable-next-line react-hooks/exhaustive-deps
    useDependencies ? [mediaQueryLists, values, defaultValue] : []);
    // State and setter for matched value
    var _a = react_1.useState(getValue), value = _a[0], setValue = _a[1];
    react_1.useEffect(function () {
        // Event listener callback
        // Note: By defining getValue outside of useEffect we ensure that it has ...
        // ... current values of hook args (as this hook callback is created once on mount).
        var handler = function () { return setValue(getValue); };
        // Set a listener for each media query with above handler as callback.
        mediaQueryLists.forEach(function (mql) { return mql.addListener(handler); });
        // Remove listeners on cleanup
        return function () { return mediaQueryLists.forEach(function (mql) { return mql.removeListener(handler); }); };
    }, 
    // eslint-disable-next-line react-hooks/exhaustive-deps
    useDependencies ? [mediaQueryLists, setValue, getValue] : []);
    return value;
}
exports.useMedia = useMedia;
